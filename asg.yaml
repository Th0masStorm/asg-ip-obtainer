AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Owner: Karen Tovmasyan (karen@tovmasyan.io)
  WARNING: This is a demo template, which is not intended for production usage
  due to potential security and reliability issues
  Please consider AWS Well-Architected Framework when building and running workloads on AWS

  COST WARNING! AWS OFFERS A FREE TIER, YET NOT EVERYTHING IS COVERED IN A FREE TIER.
  SOME OF THE RESOURCES DECLARED IN A STACK COST MONEY.
  KEEP THAT IN MIND SO YOU DON'T GET UPSET BECAUSE OF THE BILL!

  DON'T FORGET TO DELETE STACK AND/OR TERMINATE ITS RESOURCES WHEN DONE PLAYING
  RUN: "aws cloudformation delete-stack --stack-name YOUR_STACK_NAME"
  OR DELETE IT USING THE AWS CONSOLE

Parameters:
  Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    # Using the default and latest Amazon Linux 2 GP2
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  AsgDesSize:
    Type: Number
    Default: 1

  AsgMaxSize:
    Type: Number
    Default: 1

  AsgMinSize:
    Type: Number
    Default: 1

  Cidr:
    Type: String
    Default: "10.0.0.0/16"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  KeyName:
    # Yes, I should use "AWS::EC2::KeyPair::KeyName", but then CFN will check if such key exists
    # And since "" key doesn't exist, it will fail.
    # While I want to reserve the right to create EC2 instances w/o SSH Keys
    Type: String
    Default: ""

  # Instance type is set to the one which is in a AWS Free Tier
  # USE DIFFERENT IN YOUR OWN RISK!!!
  InstanceType:
    Type: String
    Default: t2.micro


Conditions:
  # This condition is used to decide if CFN will create Lt with key or not
  KeyProvided: !Not [ !Equals [!Ref KeyName, ""]]

Resources:

  # Network block:
  # Note that only public subnets are created and no NACLs are declared
  # Also only 2 subnets are created and 2 AZs are used
  # And this is why this template should NOT be used in production.
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Cidr

  Igw:
    Type: AWS::EC2::InternetGateway

  IgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  Rt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PubRoute:
    DependsOn: IgwAttach
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Rt
      GatewayId: !Ref Igw
      DestinationCidrBlock: 0.0.0.0/0

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !Ref Cidr, 2, 8 ] ]
      VpcId: !Ref Vpc

  Subnet1RtAssoc:
    DependsOn: PubRoute
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Rt
      SubnetId: !Ref Subnet1

  Subnet2:
    DependsOn: PubRoute
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !Ref Cidr, 2, 8 ] ]
      VpcId: !Ref Vpc

  Subnet2RtAssoc:
    DependsOn: PubRoute
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Rt
      SubnetId: !Ref Subnet2

  # This is a dummy LT with Amazon Linux 2
  # Or any other AMI if you provide different SSM parameter
  # No user data, the key is defined if you specify its name in a parameter
  Lt:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref Ami
        InstanceType: !Ref InstanceType
        KeyName:
          Fn::If:
            - KeyProvided
            - Ref: KeyName
            - Ref: AWS::NoValue

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref AsgDesSize
      LaunchTemplate:
        LaunchTemplateId: !Ref Lt
        Version: !GetAtt Lt.LatestVersionNumber
      MaxSize: !Ref AsgMaxSize
      MinSize: !Ref AsgMinSize
      # Oh yes, this is ugly... Ping my if you find a better way to combine multiple subnet Ids to a list
      VPCZoneIdentifier: !Split [",", !Join [",", [!Ref Subnet1, !Ref Subnet2]]]
